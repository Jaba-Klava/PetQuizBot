import logging
import random
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_USERNAME = "@kris_mem"

# –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π
ANIMALS = {
   "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "description": "–í—ã ‚Äî —Å–∏–ª–∞ –∏ –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ! –ö–∞–∫ –∞–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä, –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–µ–±–µ.",
        "image": "tiger.jpg"
    },
    "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": {
        "description": "–í—ã –≤—ã–Ω–æ—Å–ª–∏–≤—ã –∏ –ª—é–±–∏—Ç–µ —Ö–æ–ª–æ–¥! –ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å ‚Äî –≤–∞—à –¥—É—Ö-–ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å.",
        "image": "polar_bear.jpg"
    },
    "–†—ã—Å—å": {
        "description": "–í—ã –∑–∞–≥–∞–¥–æ—á–Ω—ã –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã. –ö–∞–∫ —Ä—ã—Å—å, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞.",
        "image": "lynx.jpg"
    },
    "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": {
        "description": "–í—ã —Ä–µ–¥–∫–∏ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã. –°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å ‚Äî –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤–∞—à–µ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.",
        "image": "snow_leopard.jpg"
    },
    "–ú–∞–Ω—É–ª": {
        "description": "–í—ã ‚Äî —Ü–∞—Ä—å –º–µ–º–æ–≤ –∏ –ª—é–±–∏—Ç–µ–ª—å —É—é—Ç–∞. –ú–∞–Ω—É–ª —Å –µ–≥–æ –≥—Ä–∏–º–∞—Å–∞–º–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ –≤–∞—Å!",
        "image": "manul.jpg"
    },
    "–§–µ–Ω–µ–∫": {
        "description": "–í—ã –æ–±–∞—è—Ç–µ–ª—å–Ω—ã –∏ –ª—é–±–∏—Ç–µ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è, –∫–∞–∫ —ç—Ç–æ—Ç —É—à–∞—Å—Ç—ã–π –ª–∏—Å.",
        "image": "fennec.jpg"
    },
    "–°—É—Ä–∏–∫–∞—Ç": {
        "description": "–í—ã –æ–±—â–∏—Ç–µ–ª—å–Ω—ã –∏ –±–¥–∏—Ç–µ–ª—å–Ω—ã. –°—É—Ä–∏–∫–∞—Ç ‚Äî –≤–∞—à —Ç–æ—Ç–µ–º!",
        "image": "meerkat.jpg"
    },
    "–ö–∏—Ç–æ–≥–ª–∞–≤": {
        "description": "–í—ã —Ñ–∏–ª–æ—Å–æ—Ñ –∏ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω. –ö–∏—Ç–æ–≥–ª–∞–≤ —Å –µ–≥–æ ¬´—É–ª—ã–±–∫–æ–π¬ª ‚Äî –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!",
        "image": "shoebill.jpg"
    },
    "–ñ–∞–±–∞ –∞–≥–∞": {
        "description": "–í—ã —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã –∏ —è–¥–æ–≤–∏—Ç—ã (–≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ)! –ú–∞—Å—Ç–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
        "image": "toad.jpg"
    },
    "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": {
        "description": "–í—ã –º–∏–ª—ã –∏ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–Ω–∏–≤—ã. –ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞ ‚Äî –≤–∞—à –ø—É—à–∏—Å—Ç—ã–π –¥–≤–æ–π–Ω–∏–∫.",
        "image": "red_panda.jpg"
    }
}


# –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
QUIZ_QUESTIONS = [
    {
        "question": "–ö–∞–∫–æ–π –∫–ª–∏–º–∞—Ç –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ?",
        "options": ["–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–ª–æ–¥", "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ñ–∞—Ä–∫–∏–π —Å—É—Ö–æ–π"],
        "weights": {
            "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": 1,
            "–†—ã—Å—å": 2,
            "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": 3,
            "–§–µ–Ω–µ–∫": 1,
            "special": {1: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç—å?",
        "options": ["–ê—Ç–∞–∫–∞", "–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞", "–ë–µ–≥—Å—Ç–≤–æ", "–Ø–¥–æ–≤–∏—Ç–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": 2,
            "–ú—ã—à—å-–º–∞–ª—é—Ç–∫–∞": 3,
            "special": {3: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–í–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è?",
        "options": ["–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π", "–ó–∞–≥–∞–¥–æ—á–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–¢–æ–∫—Å–∏—á–Ω—ã–π"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–ö–∏—Ç–æ–≥–ª–∞–≤": 2,
            "–°—É—Ä–∏–∫–∞—Ç": 3,
            "special": {3: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–ì–¥–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∂–∏—Ç—å?",
        "options": ["–õ–µ–¥—è–Ω—ã–µ –ø—É—Å—Ç—ã–Ω–∏", "–ë–æ–ª–æ—Ç–∞", "–ì–æ—Ä–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã", "–õ–µ—Å–∞"],
        "weights": {
            "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": 1,
            "–ú–∞–Ω—É–ª": 2,
            "–†—ã—Å—å": 3,
            "special": {1: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è?",
        "options": ["–ë—ã—Å—Ç—Ä–æ –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ", "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ", "–ü–æ—Å–ª–µ —Ä–∞–∑–¥—É–º–∏–π", "–°–æ–≤–µ—Ç—É—é—Å—å —Å –¥—Ä—É–≥–∏–º–∏"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": 2,
            "–ö–∏—Ç–æ–≥–ª–∞–≤": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–í–∞—à–µ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫?",
        "options": ["–†–∞—Å—Å–≤–µ—Ç", "–î–µ–Ω—å", "–°—É–º–µ—Ä–∫–∏", "–ù–æ—á—å"],
        "weights": {
            "–§–µ–Ω–µ–∫": 1,
            "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": 2,
            "–ú–∞–Ω—É–ª": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∏—Å–∫—É?",
        "options": ["–û–±–æ–∂–∞—é —Ä–∏—Å–∫", "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ò–∑–±–µ–≥–∞—é —Ä–∏—Å–∫–∞", "–†–∏—Å–∫—É—é —Å –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–†—ã—Å—å": 2,
            "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º?",
        "options": ["–õ–æ–±–æ–≤–∞—è –∞—Ç–∞–∫–∞", "–•–∏—Ç—Ä–æ—Å—Ç—å", "–ò–∑–±–µ–≥–∞–Ω–∏–µ", "–ü–æ–∏—Å–∫ –ø–æ–º–æ—â–∏"],
        "weights": {
            "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": 1,
            "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": 2,
            "–°—É—Ä–∏–∫–∞—Ç": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ?",
        "options": ["–°–∏–ª–∞", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ó–Ω–∞–Ω–∏—è", "–ö–æ–º—Ñ–æ—Ä—Ç"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–ú–∞–Ω—É–ª": 2,
            "–ö–∏—Ç–æ–≥–ª–∞–≤": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –≤–µ–¥–µ—Ç–µ —Å–µ–±—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
        "options": ["–õ–∏–¥–µ—Ä", "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å", "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏", "–û–¥–∏–Ω–æ—á–∫–∞"],
        "weights": {
            "–°—É—Ä–∏–∫–∞—Ç": 1,
            "–†—ã—Å—å": 2,
            "–§–µ–Ω–µ–∫": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    }
]

# 7658675653:AAFkWmwGFK_D4PoVY3RqG-7MibmpioR0XH8
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_answers = {}
user_results = {}

def get_main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data="share_result")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞", callback_data="zoo_contacts")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞", callback_data="rate_bot")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="start_quiz")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_rating_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data="rate_1"),
         InlineKeyboardButton("–ù–µ–ø–ª–æ—Ö–æ", callback_data="rate_2"),
         InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data="rate_3"),
         InlineKeyboardButton("–û—Ç–ª–∏—á–Ω–æ!", callback_data="rate_4"),
         InlineKeyboardButton("–í—Å–µ —Å—É–ø–µ—Ä!", callback_data="rate_5")]
         
    ]
)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üêæ\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Ç–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")]
        ])
    )

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_answers[user_id] = []
    user_results[user_id] = None
    await ask_question(query, context, 0)

async def ask_question(query, context: ContextTypes.DEFAULT_TYPE, index: int):
    question = QUIZ_QUESTIONS[index]
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"ans_{index}_{i}")]
        for i, opt in enumerate(question["options"])
    ]
    await query.edit_message_text(
        text=f"–í–æ–ø—Ä–æ—Å {index+1}/{len(QUIZ_QUESTIONS)}:\n{question['question']}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, q_idx, a_idx = query.data.split('_')
    q_idx, a_idx = int(q_idx), int(a_idx)
    
    user_id = query.from_user.id
    if user_id not in user_answers:
        user_answers[user_id] = []
    user_answers[user_id].append((q_idx, a_idx))
    
    if q_idx + 1 < len(QUIZ_QUESTIONS):
        await ask_question(query, context, q_idx + 1)
    else:
        await show_result(query, context, user_id)

async def show_result(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_animal = random.choice(list(ANIMALS.keys()))
    description = ANIMALS[result_animal]['description']
    user_results[user_id] = result_animal
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ç–æ
    with open(f"images/{ANIMALS[result_animal]['image']}", 'rb') as photo:
        await context.bot.send_photo(
            chat_id=query.message.chat.id,
            photo=photo,
            caption=f"üéâ –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {result_animal}!\n\n{description}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard())
    

async def share_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id in user_results:
        result_animal = user_results[user_id]
        description = ANIMALS[result_animal]['description']
        
        share_text = (
            f"üêæ –Ø –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –º–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {result_animal}!\n\n"
            f"{description}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã: @PetQuizBot"
        )
        
        await query.edit_message_text(
            text=f"{share_text}\n\n–°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_result")]
            ])
        )

async def back_to_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard())
    

async def zoo_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üêæ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: 7 (962) 971-38-75\n"
        "‚úâÔ∏è zoofriends@moscowzoo.ru\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ @kris_mem",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_result")]
        ])
    )

async def rate_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:",
        reply_markup=get_rating_keyboard())
    reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_result")]
        ])

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    rating = int(query.data.split('_')[1])
    user = query.from_user
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_USERNAME,
        text=f"‚≠ê –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –±–æ—Ç–∞ –æ—Ç @{user.username}: {rating}/5"
    )
    
    await query.edit_message_text(
        text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_result")]
        ])
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_quiz":
        await start_quiz(update, context)
    elif query.data.startswith("ans_"):
        await handle_answer(update, context)
    elif query.data == "share_result":
        await share_result(update, context)
    elif query.data == "zoo_contacts":
        await zoo_contacts(update, context)
    elif query.data == "rate_bot":
        await rate_bot(update, context)
    elif query.data.startswith("rate_"):
        await handle_rating(update, context)
    elif query.data == "back_to_result":
        await back_to_result(update, context)

def main():
    application = Application.builder().token("7658675653:AAFkWmwGFK_D4PoVY3RqG-7MibmpioR0XH8").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    application.run_polling()

if __name__ == '__main__':
    main()