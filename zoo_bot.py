import logging
import random
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π
ANIMALS = {
    "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "description": "–í—ã ‚Äî —Å–∏–ª–∞ –∏ –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ! –ö–∞–∫ –∞–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä, –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–µ–±–µ.",
    },
    "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": {
        "description": "–í—ã –≤—ã–Ω–æ—Å–ª–∏–≤—ã –∏ –ª—é–±–∏—Ç–µ —Ö–æ–ª–æ–¥! –ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å ‚Äî –≤–∞—à –¥—É—Ö-–ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å.",
    },
    "–†—ã—Å—å": {
        "description": "–í—ã –∑–∞–≥–∞–¥–æ—á–Ω—ã –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã. –ö–∞–∫ —Ä—ã—Å—å, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞.",
    },
    "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": {
        "description": "–í—ã —Ä–µ–¥–∫–∏ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã. –°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å ‚Äî –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤–∞—à–µ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.",
    },
    "–ú–∞–Ω—É–ª": {
        "description": "–í—ã ‚Äî —Ü–∞—Ä—å –º–µ–º–æ–≤ –∏ –ª—é–±–∏—Ç–µ–ª—å —É—é—Ç–∞. –ú–∞–Ω—É–ª —Å –µ–≥–æ –≥—Ä–∏–º–∞—Å–∞–º–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ –≤–∞—Å!",
    },
    "–§–µ–Ω–µ–∫": {
        "description": "–í—ã –æ–±–∞—è—Ç–µ–ª—å–Ω—ã –∏ –ª—é–±–∏—Ç–µ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è, –∫–∞–∫ —ç—Ç–æ—Ç —É—à–∞—Å—Ç—ã–π –ª–∏—Å.",
    },
    "–°—É—Ä–∏–∫–∞—Ç": {
        "description": "–í—ã –æ–±—â–∏—Ç–µ–ª—å–Ω—ã –∏ –±–¥–∏—Ç–µ–ª—å–Ω—ã. –°—É—Ä–∏–∫–∞—Ç ‚Äî –≤–∞—à —Ç–æ—Ç–µ–º!",
    },
    "–ö–∏—Ç–æ–≥–ª–∞–≤": {
        "description": "–í—ã —Ñ–∏–ª–æ—Å–æ—Ñ –∏ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω. –ö–∏—Ç–æ–≥–ª–∞–≤ —Å –µ–≥–æ ¬´—É–ª—ã–±–∫–æ–π¬ª ‚Äî –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!",
    },
    "–ñ–∞–±–∞ –∞–≥–∞": {
        "description": "–í—ã —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã –∏ —è–¥–æ–≤–∏—Ç—ã (–≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ)! –ú–∞—Å—Ç–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
        "image": "zhaba.jpg"
    },
    "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": {
        "description": "–í—ã –º–∏–ª—ã –∏ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–Ω–∏–≤—ã. –ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞ ‚Äî –≤–∞—à –ø—É—à–∏—Å—Ç—ã–π –¥–≤–æ–π–Ω–∏–∫.",
    }
}

# 10 —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
QUIZ_QUESTIONS = [
    {
        "question": "–ö–∞–∫–æ–π –∫–ª–∏–º–∞—Ç –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ?",
        "options": ["–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–ª–æ–¥", "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ñ–∞—Ä–∫–∏–π —Å—É—Ö–æ–π"],
        "weights": {
            "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": 1,
            "–†—ã—Å—å": 2,
            "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": 3,
            "–§–µ–Ω–µ–∫": 1,
            "special": {1: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç—å?",
        "options": ["–ê—Ç–∞–∫–∞", "–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞", "–ë–µ–≥—Å—Ç–≤–æ", "–Ø–¥–æ–≤–∏—Ç–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": 2,
            "–ú—ã—à—å-–º–∞–ª—é—Ç–∫–∞": 3,
            "special": {3: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–í–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è?",
        "options": ["–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π", "–ó–∞–≥–∞–¥–æ—á–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–¢–æ–∫—Å–∏—á–Ω—ã–π"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–ö–∏—Ç–æ–≥–ª–∞–≤": 2,
            "–°—É—Ä–∏–∫–∞—Ç": 3,
            "special": {3: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–ì–¥–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∂–∏—Ç—å?",
        "options": ["–õ–µ–¥—è–Ω—ã–µ –ø—É—Å—Ç—ã–Ω–∏", "–ë–æ–ª–æ—Ç–∞", "–ì–æ—Ä–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã", "–õ–µ—Å–∞"],
        "weights": {
            "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": 1,
            "–ú–∞–Ω—É–ª": 2,
            "–†—ã—Å—å": 3,
            "special": {1: {"–ñ–∞–±–∞ –∞–≥–∞": 5}}  # –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç -> –∂–∞–±–∞
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è?",
        "options": ["–ë—ã—Å—Ç—Ä–æ –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ", "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ", "–ü–æ—Å–ª–µ —Ä–∞–∑–¥—É–º–∏–π", "–°–æ–≤–µ—Ç—É—é—Å—å —Å –¥—Ä—É–≥–∏–º–∏"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": 2,
            "–ö–∏—Ç–æ–≥–ª–∞–≤": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–í–∞—à–µ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫?",
        "options": ["–†–∞—Å—Å–≤–µ—Ç", "–î–µ–Ω—å", "–°—É–º–µ—Ä–∫–∏", "–ù–æ—á—å"],
        "weights": {
            "–§–µ–Ω–µ–∫": 1,
            "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": 2,
            "–ú–∞–Ω—É–ª": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∏—Å–∫—É?",
        "options": ["–û–±–æ–∂–∞—é —Ä–∏—Å–∫", "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ò–∑–±–µ–≥–∞—é —Ä–∏—Å–∫–∞", "–†–∏—Å–∫—É—é —Å –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–†—ã—Å—å": 2,
            "–ö—Ä–∞—Å–Ω–∞—è –ø–∞–Ω–¥–∞": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º?",
        "options": ["–õ–æ–±–æ–≤–∞—è –∞—Ç–∞–∫–∞", "–•–∏—Ç—Ä–æ—Å—Ç—å", "–ò–∑–±–µ–≥–∞–Ω–∏–µ", "–ü–æ–∏—Å–∫ –ø–æ–º–æ—â–∏"],
        "weights": {
            "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å": 1,
            "–°–Ω–µ–∂–Ω—ã–π –±–∞—Ä—Å": 2,
            "–°—É—Ä–∏–∫–∞—Ç": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ?",
        "options": ["–°–∏–ª–∞", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ó–Ω–∞–Ω–∏—è", "–ö–æ–º—Ñ–æ—Ä—Ç"],
        "weights": {
            "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": 1,
            "–ú–∞–Ω—É–ª": 2,
            "–ö–∏—Ç–æ–≥–ª–∞–≤": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –≤–µ–¥–µ—Ç–µ —Å–µ–±—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
        "options": ["–õ–∏–¥–µ—Ä", "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å", "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏", "–û–¥–∏–Ω–æ—á–∫–∞"],
        "weights": {
            "–°—É—Ä–∏–∫–∞—Ç": 1,
            "–†—ã—Å—å": 2,
            "–§–µ–Ω–µ–∫": 3,
            "special": {}  # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        }
    }
]

user_answers = {}

async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üêæ\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Ç–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")]
        ])
    )

async def start_quiz(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    user_answers[query.from_user.id] = []
    await ask_question(update, context, 0)

async def ask_question(update: Update, context: CallbackContext, index: int) -> None:
    """–ó–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    question = QUIZ_QUESTIONS[index]
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"ans_{index}_{i}")]
        for i, opt in enumerate(question["options"])
    ]
    
    await update.callback_query.edit_message_text(
        text=f"–í–æ–ø—Ä–æ—Å {index+1}/{len(QUIZ_QUESTIONS)}:\n{question['question']}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_answer(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    _, q_idx, a_idx = query.data.split('_')
    q_idx, a_idx = int(q_idx), int(a_idx)
    
    user_id = query.from_user.id
    if user_id not in user_answers:
        user_answers[user_id] = []
    user_answers[user_id].append((q_idx, a_idx))
    
    if q_idx + 1 < len(QUIZ_QUESTIONS):
        await ask_question(update, context, q_idx + 1)
    else:
        await show_result(update, context, user_id)

async def show_result(update: Update, context: CallbackContext, user_id: int) -> None:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    animal_scores = defaultdict(int)
    jaba_points = 0
    
    for q_idx, a_idx in user_answers[user_id]:
        question = QUIZ_QUESTIONS[q_idx]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã
        for animal, weight in question['weights'].items():
            if animal != 'special':
                animal_scores[animal] += weight
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –∂–∞–±—ã
        if 'special' in question['weights'] and a_idx in question['weights']['special']:
            jaba_points += question['weights']['special'][a_idx].get('–ñ–∞–±–∞ –∞–≥–∞', 0)
    
    # –ñ–∞–±–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    if jaba_points >= 15:  # 3+ "–∂–∞–±—å–∏—Ö" –æ—Ç–≤–µ—Ç–∞
        result_animal = '–ñ–∞–±–∞ –∞–≥–∞'
    else:
        # –£–¥–∞–ª—è–µ–º –∂–∞–±—É –∏–∑ –æ–±—â–µ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
        animal_scores.pop('–ñ–∞–±–∞ –∞–≥–∞', None)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —Ç–æ–ø-3 –∂–∏–≤–æ—Ç–Ω—ã—Ö
        top_animals = sorted(animal_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        result_animal = random.choice(top_animals)[0] if top_animals else '–ú–∞–Ω—É–ª'
    
    description = ANIMALS[result_animal]['description']
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data="about_program")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="start_quiz")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∂–∞–±—ã
    if result_animal == '–ñ–∞–±–∞ –∞–≥–∞' and 'image' in ANIMALS[result_animal]:
        try:
            with open(ANIMALS[result_animal]['image'], 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat.id,
                    photo=photo,
                    caption=f"üéâ –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {result_animal}!\n\n{description}",
                    reply_markup=keyboard
                )
        except FileNotFoundError:
            await send_text_result(update, result_animal, description, keyboard)
    else:
        await send_text_result(update, result_animal, description, keyboard)

async def send_text_result(update: Update, animal: str, desc: str, keyboard) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    await update.callback_query.edit_message_text(
        text=f"üéâ –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {animal}!\n\n{desc}",
        reply_markup=keyboard
    )

async def about_program(update: Update, context: CallbackContext) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üêæ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º–∏\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ!\n\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "üìû +7 (962) 971-38-75\n"
        "‚úâÔ∏è zoofriends@moscowzoo.ru",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start_quiz")]
        ])
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token("7658675653:AAFkWmwGFK_D4PoVY3RqG-7MibmpioR0XH8").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_quiz, pattern="^start_quiz$"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^ans_"))
    application.add_handler(CallbackQueryHandler(about_program, pattern="^about_program$"))
    
    application.run_polling()

if __name__ == '__main__':
    main()